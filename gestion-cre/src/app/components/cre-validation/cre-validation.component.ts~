// import { Component, Input } from '@angular/core';
// import { CreFileService } from '../../services/cre-file.service';
//
// @Component({
//   selector: 'app-cre-validation',
//   templateUrl: './cre-validation.component.html',
//   styleUrls: ['./cre-validation.component.css']
// })
// export class CreValidationComponent {
//   @Input() structureId!: number;
//   selectedFile!: File;
//   validationResult: any;
//   message: string = '';
//
//   constructor(private creFileService: CreFileService) {}
//
//   onFileSelected(event: any): void {
//     this.selectedFile = event.target.files[0];
//   }
//
//   validateFile(): void {
//     if (!this.selectedFile) {
//       this.message = "Veuillez sélectionner un fichier CRE.";
//       return;
//     }
//     this.creFileService.validateCreFile(this.structureId, this.selectedFile).subscribe({
//       next: (res) => {
//         this.validationResult = res;
//         this.message = "Validation terminée.";
//         console.log("Validation result:", res);
//       },
//       error: (err) => {
//         console.error("Erreur lors de la validation:", err);
//         this.message = "Erreur lors de la validation du fichier.";
//       }
//     });
//   }
// }

// import { Component, Input } from '@angular/core';
// import { CreFileService } from '../../services/cre-file.service';
//
// @Component({
//   selector: 'app-cre-validation',
//   templateUrl: './cre-validation.component.html',
//   styleUrls: ['./cre-validation.component.css']
// })
// export class CreValidationComponent {
//   @Input() structureId!: number;
//   selectedFile!: File;
//   validationResult: any;
//   message: string = '';
//
//   constructor(private creFileService: CreFileService) {}
//
//   onFileSelected(event: any): void {
//     this.selectedFile = event.target.files[0];
//   }
//
//   validateFile(): void {
//     if (!this.selectedFile) {
//       this.message = "Veuillez sélectionner un fichier CRE.";
//       return;
//     }
//     const formData = new FormData();
//     formData.append('file', this.selectedFile, this.selectedFile.name);
//
//     // Assurez-vous d'utiliser l'URL correcte
//     this.creFileService.validateCreFile(this.structureId, this.selectedFile).subscribe({
//       next: (res) => {
//         this.validationResult = res;
//         this.message = "Verification terminée.";
//         console.log("Verification result:", res);
//       },
//       error: (err) => {
//         console.error("Erreur lors de la verification:", err);
//         // Afficher plus d'informations sur l'erreur
//         if(err.error) {
//           this.message = "Erreur lors de la verification du fichier: " + JSON.stringify(err.error);
//         } else {
//           this.message = "Erreur lors de la verification du fichier.";
//         }
//       }
//     });
//   }
// }


//////////////////
// import { Component, OnInit } from '@angular/core';
// import { CreFileService } from '../../services/cre-file.service';
// import { StructureCREService } from '../../services/structure-cre.service';
// import { StructureCRE } from '../../models/structure-cre.model';
//
// @Component({
//   selector: 'app-cre-validation',
//   templateUrl: './cre-validation.component.html',
//   styleUrls: ['./cre-validation.component.css']
// })
// export class CreValidationComponent implements OnInit {
//   // Liste des structures disponibles
//   structures: StructureCRE[] = [];
//   // ID de la structure sélectionnée
//
//
//   selectedStructureId?: number;
//
//   // Fichier CRE sélectionné par l'utilisateur
//   selectedFile!: File;
//   // Résultat de la validation (peut être "Fichier conforme" ou un tableau d'erreurs)
//   validationResult: any;
//   // Message global (succès ou erreur)
//   message: string = '';
//
//   constructor(
//     private creFileService: CreFileService,
//     private structureService: StructureCREService
//   ) {}
//
//   ngOnInit(): void {
//     // Charger la liste des structures au démarrage
//     this.structureService.getStructures().subscribe({
//       next: (data) => {
//         this.structures = data;
//         // Si au moins une structure existe, on la pré-sélectionne
//         if (this.structures.length > 0) {
//           this.selectedStructureId = this.structures[0].id;
//         }
//       },
//       error: (err) => {
//         console.error("Erreur lors du chargement des structures", err);
//         this.message = "Erreur lors du chargement des structures.";
//       }
//     });
//   }
//
//   // Méthode appelée lors de la sélection d'un fichier par l'utilisateur
//   onFileSelected(event: any): void {
//     this.selectedFile = event.target.files[0];
//   }
//
//   // Méthode de validation du fichier CRE
//   validateFile(): void {
//     if (this.selectedStructureId === undefined) {
//       this.message = "Veuillez sélectionner une structure.";
//       return;
//     }
//     if (!this.selectedFile) {
//       this.message = "Veuillez sélectionner un fichier CRE.";
//       return;
//     }
//     const formData = new FormData();
//     formData.append('file', this.selectedFile, this.selectedFile.name);
//
//     this.creFileService.validateCreFile(this.selectedStructureId, this.selectedFile).subscribe({
//       next: (res) => {
//         this.validationResult = res;
//         this.message = "Vérification terminée.";
//         console.log("Résultat de validation:", res);
//       },
//       error: (err) => {
//         console.error("Erreur lors de la vérification:", err);
//         if (err.error) {
//           this.message = "Erreur lors de la vérification du fichier: " + JSON.stringify(err.error);
//         } else {
//           this.message = "Erreur lors de la vérification du fichier.";
//         }
//       }
//     });
//   }
//
//   protected readonly Array = Array;
// }

//////////////////////////////


// import { Component, OnInit } from '@angular/core';
// import { CreFileService } from '../../services/cre-file.service';
// import { StructureCREService } from '../../services/structure-cre.service';
// import { StructureCRE } from '../../models/structure-cre.model';
//
// @Component({
//   selector: 'app-cre-validation',
//   templateUrl: './cre-validation.component.html',
//   styleUrls: ['./cre-validation.component.css']
// })
// export class CreValidationComponent implements OnInit {
//   // Liste des structures récupérées depuis le backend
//   structures: StructureCRE[] = [];
//   // ID et nom de la structure sélectionnée
//   selectedStructureId?: number;
//   structureName: string = '';
//
//   // Pour la gestion du fichier CRE à valider
//   selectedFile!: File;
//   validationResult: any;
//   message: string = '';
//
//   constructor(
//     private creFileService: CreFileService,
//     private structureService: StructureCREService
//   ) {}
//
//   ngOnInit(): void {
//     // Charger la liste des structures dès l'initialisation
//     this.structureService.getStructures().subscribe({
//       next: (data: StructureCRE[]) => {
//         this.structures = data;
//         if (this.structures.length > 0) {
//           // Pré-sélectionner la première structure par défaut
//           this.selectedStructureId = this.structures[0].id;
//           this.structureName = this.structures[0].nomStructure;
//         }
//       },
//       error: (err) => {
//         console.error("Erreur lors du chargement des structures", err);
//         this.message = "Erreur lors du chargement des structures.";
//       }
//     });
//   }
//
//   // Méthode appelée lorsque l'utilisateur change la structure dans le menu déroulant
//   onStructureChange(): void {
//     const selected = this.structures.find(s => s.id === this.selectedStructureId);
//     if (selected) {
//       this.structureName = selected.nomStructure;
//     }
//   }
//
//   // Sélection du fichier CRE
//   onFileSelected(event: any): void {
//     this.selectedFile = event.target.files[0];
//   }
//
//   // Validation du fichier CRE par rapport à la structure sélectionnée
//   validateFile(): void {
//     if (!this.selectedStructureId) {
//       this.message = "Veuillez sélectionner une structure.";
//       return;
//     }
//     if (!this.selectedFile) {
//       this.message = "Veuillez sélectionner un fichier CRE.";
//       return;
//     }
//     const formData = new FormData();
//     formData.append('file', this.selectedFile, this.selectedFile.name);
//
//     this.creFileService.validateCreFile(this.selectedStructureId, this.selectedFile).subscribe({
//       next: (res) => {
//         this.validationResult = res;
//         this.message = "Vérification terminée.";
//         console.log("Résultat de validation:", res);
//       },
//       error: (err) => {
//         console.error("Erreur lors de la vérification:", err);
//         if (err.error) {
//           this.message = "Erreur lors de la vérification du fichier: " + JSON.stringify(err.error);
//         } else {
//           this.message = "Erreur lors de la vérification du fichier.";
//         }
//       }
//     });
//   }
//
//   // Upload du fichier CRE (appelé que le fichier soit conforme ou non)
//   uploadFile(): void {
//     if (!this.selectedFile) {
//       this.message = "Aucun fichier sélectionné.";
//       return;
//     }
//     if (!this.selectedStructureId) {
//       this.message = "Veuillez sélectionner une structure.";
//       return;
//     }
//     this.creFileService.uploadFiles(this.selectedStructureId, [this.selectedFile]).subscribe({
//       next: (res: any) => {
//         this.message = res.message || "Fichier chargé avec succès.";
//       },
//       error: (err) => {
//         console.error("Erreur lors du chargement du fichier", err);
//         this.message = "Erreur lors du chargement du fichier.";
//       }
//     });
//   }
//
//   // Annuler l'opération
//   cancel(): void {
//     this.selectedFile = undefined as any;
//     this.validationResult = null;
//     this.message = '';
//   }
//
//   protected readonly Array = Array;
// }

///////////////////
import { Component, OnInit } from '@angular/core';
import { CreFileService } from '../../services/cre-file.service';
import { StructureCREService } from '../../services/structure-cre.service';
import { StructureCRE } from '../../models/structure-cre.model';

@Component({
  selector: 'app-cre-validation',
  templateUrl: './cre-validation.component.html',
  styleUrls: ['./cre-validation.component.css']
})
export class CreValidationComponent implements OnInit {
  // Liste des structures récupérées depuis le backend
  structures: StructureCRE[] = [];
  // ID et nom de la structure sélectionnée
  selectedStructureId?: number;
  structureName: string = '';

  // Pour la gestion du fichier CRE à valider
  selectedFile!: File;
  validationResult: any;
  message: string = '';

  // Liste des fichiers déjà chargés dans la structure
  availableFiles: string[] = [];

  constructor(
    private creFileService: CreFileService,
    private structureService: StructureCREService
  ) {}

  ngOnInit(): void {
    // Charger la liste des structures dès l'initialisation
    this.structureService.getStructures().subscribe({
      next: (data: StructureCRE[]) => {
        this.structures = data;
        if (this.structures.length > 0) {
          // Pré-sélectionner la première structure par défaut
          this.selectedStructureId = this.structures[0].id;
          this.structureName = this.structures[0].nomStructure;
          this.loadAvailableFiles();
        }
      },
      error: (err) => {
        console.error("Erreur lors du chargement des structures", err);
        this.message = "Erreur lors du chargement des structures.";
      }
    });
  }

  // Méthode appelée lorsque l'utilisateur change la structure dans le menu déroulant
  onStructureChange(): void {
    const selected = this.structures.find(s => s.id === this.selectedStructureId);
    if (selected) {
      this.structureName = selected.nomStructure;
      this.loadAvailableFiles();
    }
  }

  // Charger la liste des fichiers déjà chargés pour la structure sélectionnée
  loadAvailableFiles(): void {
    if (!this.selectedStructureId) return;
    this.creFileService.listFiles(this.selectedStructureId).subscribe({
      next: (files) => {
        this.availableFiles = files;
      },
      error: (err) => {
        console.error("Erreur lors du chargement des fichiers", err);
        this.message = "Erreur lors du chargement des fichiers.";
      }
    });
  }

  // Sélection du fichier CRE
  onFileSelected(event: any): void {
    this.selectedFile = event.target.files[0];
  }

  // Validation du fichier CRE par rapport à la structure sélectionnée
  validateFile(): void {
    if (!this.selectedStructureId) {
      this.message = "Veuillez sélectionner une structure.";
      return;
    }
    if (!this.selectedFile) {
      this.message = "Veuillez sélectionner un fichier CRE.";
      return;
    }
    const formData = new FormData();
    formData.append('file', this.selectedFile, this.selectedFile.name);

    this.creFileService.validateCreFile(this.selectedStructureId, this.selectedFile).subscribe({
      next: (res) => {
        this.validationResult = res;
        this.message = "Vérification terminée.";
        console.log("Résultat de validation:", res);
      },
      error: (err) => {
        console.error("Erreur lors de la vérification:", err);
        if (err.error) {
          this.message = "Erreur lors de la vérification du fichier: " + JSON.stringify(err.error);
        } else {
          this.message = "Erreur lors de la vérification du fichier.";
        }
      }
    });
  }

  // Upload du fichier CRE (si conforme ou non conforme)
  uploadFile(): void {
    if (!this.selectedFile) {
      this.message = "Aucun fichier sélectionné.";
      return;
    }
    if (!this.selectedStructureId) {
      this.message = "Veuillez sélectionner une structure.";
      return;
    }
    // Vérifier si le fichier existe déjà dans la structure
    if (this.availableFiles.includes(this.selectedFile.name)) {
      this.message = "Fichier déjà existant.";
      return;
    }

    this.creFileService.uploadFiles(this.selectedStructureId, [this.selectedFile]).subscribe({
      next: (res: any) => {
        this.message = res.message || "Fichier chargé avec succès.";
        this.loadAvailableFiles(); // Rafraîchir la liste des fichiers disponibles
      },
      error: (err) => {
        console.error("Erreur lors du chargement du fichier", err);
        this.message = "Erreur lors du chargement du fichier.";
      }
    });
  }

  // Annuler l'opération
  cancel(): void {
    this.selectedFile = undefined as any;
    this.validationResult = null;
    this.message = '';
  }

  protected readonly Array = Array;
}




